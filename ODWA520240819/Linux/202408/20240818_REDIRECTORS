Redirector operators
---------------------
Every bash command takes the input data (if any) from the STDIN (keyboard) and writes/generates the output onto STDOUT (console/monitor). If we want to change the input (STDIN) or output (STDOUT) of the bash commands then we need to use redirector operators.
	
There are 2 types of redirector operators are there
1. < = input redirector operator. to redirect the input for a bash command
2. > = output redirector operator. to redirect the output out of a bash command to a different destination other than STDOUT.
	
How to write an output message onto the STDOUT?
echo "message"	
the echo bash command takes an message as an input and writes that to the STDOUT. if we want to redirect the output generated by the echo to a different destination other than STDOUT then we can use ">" output redirector operator. 
	
for eg.. if we want to write the output generated by the above echo bash command into a file, then we can use output redirector as below

echo "message" > filename
echo "Good morning" > greetings

if the output file we specified here is an existing file with data, it will replace the contents of the file with new output that is being generated. Incase if the file we specified doesnt exist, it creates an new file by writing the content.
	
if we dont want to replace the contents of the existing file rather if we wish to append to the existing file data we need to use >> (append operator)	
	
echo " Sriman!" >> greetings

now the greetings file will be appended with "Sriman!"


2. How to create an file with data, by reading the data from the STDIN (interactively) from the user?
	
every linux bash command takes the input from the STDIN and writes the output to STDOUT
cat filename = takes the input from file we passed and writes the output to STDOUT


linux command takes the input from STDIN
cat filename = here already input redirection is happening, because cat is not taking the data from STDIN, rather it is taking from file we supplied

cat filename is equal to cat < filename
from this we can understand for any command if we are passing argument means we are using input redirection implicitly

so if we dont supply any filename as an input the cat takes the input from STDIN and writes the output to STDOUT
cat
now the cursor waits for input from the keyboard and writes the output to STDOUT until we press ctrl + d it keeps going.
	
How to create a file with data interactively?
cat > filename


How to copy the contents of one file into another file without using cp?
cat < file1 > file2



















































	
	
	
	
	
	
	
	