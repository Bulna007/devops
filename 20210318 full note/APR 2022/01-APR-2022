docker workflow
#1. package
upon delivering software application by the developer, the devops engineer has to package the software application by building a docker image
	
#2. ship
push the docker image into docker container registry

#3. deliver/run
pull the docker image from the docker container reigstry and run a container out of the image

package -> ship -> deliver
devops engineer plays/participates in all the 3 stages of the docker workflow.
------------------------------------------------------------------------------------------
How to run the docker container?
let us explore how to run docker containers out of an existing docker images that are build only with operating system bits only.
	
#1 how to run a docker container interactively?
docker container run -it image:tag command
eg.:
docker container run -it ubuntu:20.0 bin/bash

The above command creates an docker container out of an docker image. here
-it = stands for interactive execution saying execute the "command" specified, interactively inside the container

When we run the above command docker engine does the below steps in running the container:
1. docker engine upon receiving the request for running a docker container it checks whether the docker image with tag specified is available within the local docker image cache or not. If the image is not available in the local docker workstation, then the docker engine quickly connects to the docker container registry and pulls the docker image on to the docker workstation

2. once the image is available on the docker workstation, the docker engine creates an docker container out of the image and kicks starts the default command written as part of the image in running the program inside the container

3. when we provided -it with an overriding command, it tells the docker daemon dont run the default instruction on the container, instead execute the command given interactively

so that we will enter into the container by running the command.

#2. how to see the running containers on the docker workstation or on docker daemon?
docker container ls

CONTAINER ID   IMAGE          COMMAND      CREATED              STATUS              PORTS     NAMES
7d082ce623b4   ubuntu:20.04   "bin/bash"   About a minute ago   Up About a minute             affectionate_heyrovsky

The docker cli displays the output in a tabular fashion above
CONTAINER ID = for each container docker engine creates it assigns a unique id with which we can refer the container
IMAGE = the image:tag on whom this container has been created
COMMAND = the command used in lauching the container
CREATED = the elasped time when the container has been created
STATUS = displays the current status of the container
PORTS = ports exposed out of the container
NAMES = for each container the docker generates a unique random name and assigns for easy reference
we can manage a container either by using CONTAINER ID or NAME of the container.
	
#3. How to see all the docker containers on the machine?
docker container ls -a
-a = stands for all the containers irrespective of their status
upon completing the execution of the program, docker engine terminates the container, but will not remove/destroy the container, because people/programmers may want to collect the logs generated by the container

#4. How to remove the terminated container?
docker container rm CONTAINER ID/CONTAINER NAME

#5. the other way in seeing all the running container is using
docker container ps = only shows running containers

#6. How to stop an running container
docker container stop CONTAINERID/CONTAINERNAME

#7. how to forcible stop and remove a running container?
by default when we run docker container rm ID/NAME, it will remove the container only if it is stopped/terminated, otherwise it results in an error.
if we want to stop/remove a running container forcibly we can use
docker container rm -f ID/NAME

#8. How to remove all the stopped/exited containers at one shot?
docker container prune
will removes all the containers which are stopped/exited
















































	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

















