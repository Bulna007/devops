VOLUME directive
----------------
The application that is running within the docker container may generate some data as an output during its execution. By default the application generated data will be written onto the Container Writable Layer of that container, keeping the docker image immutable/read-only (by design), it greatly reduces the diskusage in running multiple containers of the same image.
	
If the containerized application is	generating and writing the data on Container Writable layer of the image, there are certain drawbacks are there
1. The container writable layer is attached to the container and will be destroyed once the container has been terminated/destroyed, so that all the data produced by the application during its execution is lost
2. There is a huge performance degradation in writing the data onto the Container Writable Layer

It is recommended to write the non-critical or small amount of data onto the Container Writable Layer where we can survive even of lost of information

From the above we can understand the containers doesnt hold any data aspart of them which are called Stateless Containers. The docker by nature designed containers to be stateless, so that those are easily scalable to meet the workload and replaceable in case of container crash easily


But not all the applications that are bundled and executed inside the containers are not stateless, there are few applications like a database server etc generates data and should be stored permanently

If we allow the database/application to write the data onto container writable layer, on a crash the data cannot be recovered and application cannot be scalable.
These containers that generates the data which is by nature persistable data are called "Stateful" Containers

Then how to manage/write/store the data of these containerized stateful applications being generated while running in docker container,
The docker has provided 2 ways of managing stateful containers in storing the data
1. bind mounts
2. docker volumes
------------------------------------------------------------------------------------------
#1. bind mounts
We can mount the host machine directory onto the docker container using bind mounts, so that we can write the data generated by the containerized application on the bind mounts of the container.
	
#2. docker volumes



	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	




































	
	