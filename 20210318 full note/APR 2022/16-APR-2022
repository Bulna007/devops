bind mounts
-----------
bind mounts are used for mouting the host computer directory on to the docker container. while running statefull applications within a container, to ensure the data is not lost incase of container crash or destroyed we use bind mounts.

advantages:-
	1. both container and the host machine can access the data that is stored in bind mounts
dis-advantages:-
	1. both host and container are running on a different platform then incompatibility issues might creep up
	2. bind mounts are slow in terms of i/o operations when compared with volumes
	3. should be manged manually
	
How to work with bind mounts?
#1. create an directory on the host machine
#2. grant appropriate permissions to the directory allowing container to access
#3. there are 2 ways of mounting an bind mount onto a container
	3.1 -v or --volume (oldstyle)
		-v sourcedir:targetdir:propagationSetting
		propagationSetting can take 3 different values
		ro = readonly
		z = sharable mount
		Z = private mount
	docker container run -v sourcedir:targetdir:propagationSetting image:tag
	
	3.2 --mount (newstyle) (abbrevative)
		--mount type=bind,source=sourcedir,target=targetdir,propagationSetting
		propagationSetting can take below values
		1. readonly
		2. sharable
		3. private
------------------------------------------------------------------------------------------
docker volume
-------------
docker volumes are the internal storage volumes managed by the docker engine into which a docker container can write the data to persist it, in the event of container crash. It is the preffered mechanism/technic to store the data generated by the docker container

The docker engine internally uses storage drivers in writing the data onto the docker volumes

advantages:-
	1. docker volumes works across the platforms, so there is no data incompatibility issues will creep up
	2. docker volumes can be created through docker cli
	3. docker volumes can be managed, backup and restored through the help of docker cli
	4. remote filesystem of an another computer can be mounted as a docker volume (nfs)
	5. docker volumes are more performant in terms of i/o when compared with bind mounts
	
There are 2 ways we can work with docker volumes
1. we can manually create docker volume on the host computer using dockercli and can mount them onto the container using their name, these are called "named volumes"
2. we can directly declare VOLUME directive inside the Dockerfile, in this case, the docker engine creates the docker volume automatically by generating an hash of the volume to identify it and mounts onto the docker container

[preffered approach]
#1. How to create docker volume through the docker cli
1.1 docker volume create volumename = creates an docker volume under default directoy /var/lib/docker/volumes/volumename (directory)
1.2 docker volume ls = to list all the volumes on that docker host
1.3 docker volume inspect volumename = to see the details of the volume
1.4 docker volume rm volumename = deletes the volume

How to mount the above volume onto the docker engine?
There are 2 ways we can mount the volume at the time of launching the container
1. -v or --volume
	-v volumeName:targetDirectory:propagrationSetting
	propagationSettings: ro(readonly), z(shared) ,Z(private)
	docker container run -v volumeName:targetDirectory:[propagationSetting]	image:tag
	
2. --mount 
	--mount type=volume source=volumeName,target=directory,propagationSetting
	
#2 we can use VOLUME directive in dockerfile directly
Dockerfile
-----------
FROM ubuntu:20.04
VOLUME["/u01"]	

1. The above VOLUME directive creates an volume on the host machine automatically without name by generating an hashvalue to the volume to identity
2. and mounts the volume onto the /u01 location of the container

For eg.. the container has been crashed/destroyed, now how can remount the same volume onto a different container. since the above volume doesnt have an name attached to it we cannnot mount this volume onto an another container

always avoid using VOLUME directive as part of the Dockerfile
------------------------------------------------------------------------------------------
How to copy a file into the volume of a running container?
docker cp sourcefile containername:location

1.for eg we launched a container using an volume below.
docker container run --name con1 -it --mount type=volume,source=mysqlvol,target=/u01 ubuntu:20.04 bash

2. now we can copy a file into the volume of the running container using below command
docker cp filename.txt con1:/u01
------------------------------------------------------------------------------------------
#10 EXPOSE directive
EXPOSE directive doesnt exposes any port of the docker container to the guest, its just for the sake of documentation stating the containerized application is running on which port so that the user who is launching the container can expose that port



























	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

















	