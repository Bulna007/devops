ELK & Elastic Stack
--------------------
In a typical microservice application, to monitor and trace the application logs we use elk or elatic stack

An microservices application is broken down into modular, independently deployable, loosely-coupled, scalable microservices.
These microservices are distributed across the cluster/nodes and running as pods within the kubernetes infrastructure

These microservices running across the cluster generates logs and are placed across the pods distributed across the worknodes of the cluster.
	
How do we identify for a given request, which microservices are involved in processing and what are their outcome of execution, in case of failure how do we debug or analyze the cause of the failure?
To help in tracking and analyzing the logs for a given request the development team has include a uniquenumber which can be an traceId, flowId, correlationId etc included and propagated for each request across the microservices. and this traceId should be included while generating the logs

Now the support/ops/devops/development team can search through the logs to identify the request patterns and failure analysis of the application

But the problem here is the logs are distributed/scattered across the pods of kubernetes cluster, it will be difficult to gothrough each pod of the cluster to search for logging information.
To aggregate all the logs and browse/analyze them easily we use ELK.
	
ELK stands for elasticsearch, logstash and kibana, these are 3 components used for aggregating the logs generated across the microservices of an application and read/process them easily through dashboards of kibana

It is the responsiblity of the devops engineer to configure/setup/install elk for an microservice application.
	
	
ElasticSearch:
In general within a log file we want to search the information based on
1. errors
2. keywords / common attributes/fields for an application like
	2.1 traceId
	2.2 loggedInUser
	2.2 Locale
	2.3 date and time
	2.4 application name
	2.5 headers
3. free form text
4. regular expression / matching

The application logs file accumulates and aggregates over a period of time into GB as well searching through such huge amount of logs and identifying the required information takes huge cpu, memory and the tools/systems (nodepad++/texteditor) we use becomes unresponsive

To support searching through large volumes of log files and identify and return search results, the elasticsearch is used.
The logs that are generated by the application are pushed into elasticsearch engine. per each application representing the log of the application we create index in elasticsearch engine and we define per each logfile the fields or attributes to be indexed.
	
#2. LogStash
LogStash is an forwarder agent/tool that takes the responsibility of reading the log files and messages generated from an log file, formats them and converts into a format that elasticsearch engine understands and publishes into elasticsearch engine.
	
#3. Kibana
kibana is a data visualization tool that pulls the logs information from elasticsearch and displays the logs file which we can search through using UI.
we can create dashboards display different metrics information and can draw charts and graphs helping us in analyzing the data

The major problem with above architecture is
1. The logstash has to be executed as an sidecar in each microservice pod, which is going to consume considerable amount of cpu/memory in analyzing, formatting and publishing the logs to the elastic search engine.
	due to this the resource consumtion in a pod increases
	the performance is impacted
	unnecessary pod migrations are observed
	
To overcome the above problems the Elastic Stack has been introduced
Here a beats component which is an light weight forwarded has been introduced. There different beat components are there
1. filebeat
2. metricsbeat
3. auditbeat
4. packetbeat
5. heartbeat
these are called datashippers which ships the data to the logstash

if we use along with ELK the beats componets in implementating the ELK then it is called Elastic Stack

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














