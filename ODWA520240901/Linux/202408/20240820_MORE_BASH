Working with ranges in bash commands
We want to execute a shell or bash command repeatedly over the range of arguments/inputs then we need to use ranges represented with {}

For eg.. we want to print 1 to 10 numbers onto the console, this can be done by using echo as below
echo 1
echo 2
echo 3
echo 4
echo 5
echo 6
echo 7	
echo 8
echo 9
echo 10
	
it is time taking and repeatitive in executing the same command only with different input/argument passed. The argument value is taking a range of values from 1 to 10, in this case instead of repeatedly writing the same echo command we can use ranges

echo {1..10}

We want to create dairy files for all the days within the month, for eg.. aug month 31 days we want to create dairy files with dairy-day1.txt dairy-day2.txt dairy-day3.txt ... dairy-day31.txt

touch dairy-day1.txt
touch dairy-day2.txt

mkdir aug
cd aug/
touch dairy-day{1..31}.txt

How to remove the dairy files between 20 to 29 days?
rm dairy-day{20..29}.txt

the ranges can be used on alphabets also as below:
echo {a..z}

there is an difference between [] and {}:
[] = group of inputs (choice of inputs) = within the group we are choosing one
{} = range of inputs 
-------------------------------------------------------------------------------------------------------------------------
Hidden files in Linux operating system?
In linux operating system, if we create a file/folder	starting with "." aspart of it, then linux treats the file/folder as hidden and will not be displayed when we use ls command.
	
touch .passwords = as this file starts with ".", it will be treated as an hidden file
mkdir .keys = considered as hidden directory

when we use ls command, these 2 file and folder will not be shown. incase if we want to see these hidden files we need to use -a switch in ls command (-a stands for all)
	
ls -la
-------------------------------------------------------------------------------------------------------------------------
working with more
When we are using linux bash commands, these commands produces the output upon execution, sometimes the output generated by these commands are pretty huge and will not fit onto the screen or terminal buffer and would automatically scrolled up.
	
Along with this the terminal buffer size is always limited and can hold only few lines of last generated output and previous output would be rollout-up (cleared) automatically

due to this we will not be able to read easily or scroll-up back into the previous lines of output generated by the bash command. If we want to see all the output of a command and scroll through it line by line we can use "more" utility with any bash command.
	
tree /
since we ran tree on "/" root of the filesystem, it generates huge amount of output and auto-scrolls the content we can use "more" for scrolling through lines easily

tree / | more

book.txt = inside this book.txt we have #1000 lines of story or content, when we use cat command the output generated by the cat will be rolled-up (cleared) automatically only by showing last few lines of output. we can use "more" here as well for scrolling through the output of cat as below

cat book.txt | more
-------------------------------------------------------------------------------------------------------------------------
head and tail commands
-----------------------
head and tail are the most popular and frequently used bash commands in scrolling throught the logs files while debugging, let us explore.
	
1. head
head is something similar to cat. The "cat" is used for seeing the contents of a File, similar to that head is also being used.
	
we have a file with huge content around #1000 lines or more inside it. if we use cat command it renders all the thousand lines leaving or taking us to the bottom of the terminal displaying last page of content only and few times we will not be able to scroll-up due to the terminal buffer size.
	
Instead if we are only interested in top few lines of the file, rather than all of the content of the file we can use head.
	
cat filename = renders the entire contents of the file

instead we can use head as below
head filename = only displays the top 10 lines by default as an output

if we want to see only specific number of lines from the top of the file we can use -n option as below
head -n filename 
for eg.. if we want to see only top 5 lines we can use
head -5 filename
-------------------------------------------------------------------------------------------------------------------------
2. tail
tail is also same as cat, means it is also used for seeing the contents of a file. But it is used for seeing only the latest or bottom lines of a file. Usually tail is used for accessing the log files that are generated by the applications.
	
tail filename = by default shows the bottom 10 lines within a file
tail -n filename = shows the specified n number of lines from the bottom of the file

What is logging within an Application?
An Software Application comprises of bunch of programs working together in providing the business services that are required for running the business.
	
A program contains lot of lines of code or instructions that are written by the programmers to perform some operation.
	
The developers while writing the programs, they will add log statements to generate intermediate output during the execution of the program. This intermediate output that is generated by the program while execution acts as an checkpoints or debug info for the developers to debug and identify the problems within the program. This process of generating the intermediate output while executing the program is called "Logging"
	
In a large programs/applications the amount of log output that is generated by the program is very huge. So at somepoint in time, the output generated and written on to the console will be vanished or cleanedup. So to have these log output being used as later point of time, the intermediate output are written onto a file which are called log files.
	
These log files are persisted permanently on the harddisk of the computer, so that developer can go back anytime to see the log output and debug the application

From the above, the log output generated by the programs are written into log files (persisted permanently). 
	
As the programs while running generates and writes the output into log file, the size of these log files will be very huge, when developer wants to debug, he will not be interested in entire logfile, rather he wanted to see the latest log output that is recently generated by the program to debug.
	
so how can the developer can only see the recent or latest log output generated by the programs in the log files?
he can use tail command with specific number of recent lines he wanted to see.
	
The tail has another option called -f. -f stands for flow of the file

There are programs that runs longer amout of time and keeps generating the log output and writes on to the log file. If developer wants to monitor the program execution and see the continous log output generated by the program during its execution, he can use -f option

tail -f out.log
this will allows us to stream/browse throught he live log output generated by the program into the out.log file.
	
write a shell program that generates a bunch of numbers and writes to an log file, so that we can	the live log output using -f option in tail command.
	
1. Inorder to write the shellscript program we use gedit (notepad in windows like) text editor as below
~/> gedit printNumbers.sh

#!/bin/bash
I=1
while [ $I -lt 200 ]
do
	echo $I >> /tmp/out.log
	I=$[I+1]
	sleep 1s
done

2. grant execute permission to the program
~/> chmod u+x printNumbers.sh

3. run the program
~/> ./printNumbers.sh

4. open a new tab in the console and use tail -f to view the live log generated by the program
/tmp:/> tail -f out.log

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	














































































































































